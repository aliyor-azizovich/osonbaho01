from PyQt5.QtWidgets import QDialog, QGridLayout, QCheckBox, QPushButton, QLabel, QGroupBox, QMessageBox, QVBoxLayout, QComboBox, QWidget, QTableWidget, QLineEdit, QTableWidgetItem
from PyQt5 import uic
from PyQt5.QtCore import Qt
import os
import pandas as pd
from logic.data_entry import DataEntryForm
from logic.paths import get_ui_path
from PyQt5.QtGui import QIcon

# from  ui.ukup_window import UkupWidget
class DeviationsAndWearDialog(QDialog):
    def __init__(self, parent=None, data_service=None, valuation_window=None):
        super().__init__(parent)
        uic.loadUi(get_ui_path("cost_method_dialogs/deviations_and_wear_dialog.ui"), self)

        self.setWindowTitle("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏ —Ä–∞—Å—Å—á—ë—Ç –∏–∑–Ω–æ—Å–∞")
        
        self.setWindowIcon(QIcon("icon.ico"))  
        self.parent = parent
        self.data_service = data_service or DataEntryForm()
        self.valuation_window = valuation_window  # <-- –¥–æ–±–∞–≤–ª—è–µ–º

        self.building_id = parent.selected_analog_index
        self.altitude_data = self.data_service.altitude()
        self.tableWidget_wear = self.findChild(QTableWidget, 'tableWidget_wear')
        
        self.tableWidget_wear.keyPressEvent = self.handle_key_press

        wear_df = self.load_structural_elements(self.building_id)  # –∏–ª–∏ –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        if wear_df is not None:
            self.populate_wear_table(wear_df)
        

        self.groupBox_deviations = self.findChild(QGroupBox, 'groupBox_deviations')
        self.groupBox_improvements = self.findChild(QGroupBox, 'groupBox_improvements')

        self.comboBox_facade = self.findChild(QComboBox, "comboBox_facade")
        self.label_injener_correct = self.findChild(QLabel, 'label_injener_correct')
        self.comboBox_type_koeff = self.findChild(QComboBox, 'comboBox_type_koeff')
        self.comboBox_type_koeff.currentTextChanged.connect(self.on_type_selected)


        self.label_unit_corrected_price = self.findChild(QLabel, 'label_unit_corrected_price')
        self.label_unit = self.findChild(QLabel, 'label_unit')
        self.label_reg_koeff = self.findChild(QLabel, 'label_reg_koeff')
        self.label_stat_koeff = self.findChild(QLabel, 'label_stat_koeff')
        self.label_developper = self.findChild(QLabel, 'label_developper')
        self.label_inconsistency = self.findChild(QLabel, 'label_inconsistency')

        self.label_wear = self.findChild(QLabel, 'label_wear')
        self.label_final_cost = self.findChild(QLabel, 'label_final_cost')
        self.label_facade_result = self.findChild(QLabel, "label_facade_result")
        self.label_height_correction = self.findChild(QLabel, 'label_height_correction')
        self.label_sesmos = self.findChild(QLabel, "label_sesmos")
        self.lineEdit_corrected_price = self.findChild(QLineEdit, 'lineEdit_corrected_price')
        self.lineEdit_unit = self.findChild(QLineEdit, 'lineEdit_unit')
        self.lineEdit_reg_koeff = self.findChild(QLineEdit, 'lineEdit_reg_koeff')
        self.lineEdit_stat_koeff = self.findChild(QLineEdit, 'lineEdit_stat_koeff')
        self.lineEdit_developper = self.findChild(QLineEdit, 'lineEdit_developper')
        self.lineEdit_sesmos = self.findChild(QLineEdit, "lineEdit_sesmos")
        self.lineEdit_sesmos.setReadOnly(True)

        self.lineEdit_developper.setText(self.valuation_window.lineEdit_developer.text())
        text = float(self.lineEdit_developper.text().replace('%', '').strip())
        self.developer = text if text else 0


        self.lineEdit_inconsistency = self.findChild(QLineEdit, 'lineEdit_inconsistency')
        self.lineEdit_inconsistency.textChanged.connect(self.recalculate_all)

        self.lineEdit_wear = self.findChild(QLineEdit, 'lineEdit_wear')
        self.lineEdit_final_cost = self.findChild(QLineEdit, 'lineEdit_final_cost')
        self.pushButton_OK = self.findChild(QPushButton, 'pushButton_OK')
        self.pushButton_OK.clicked.connect(self.on_accept)

        self.lineEdit_corrected_price.setReadOnly(True)
        self.lineEdit_wear.setReadOnly(True)

        self.set_seismic_correction()
        self.facade_data = self.data_service.facade()  
        self.fill_facade_combobox()
        self.comboBox_facade.currentIndexChanged.connect(self.on_facade_selected)
        self.set_stat_koeff()
        self.set_reg_coeff()
        self.update_label_unit()
        self.show_improvements_labels()
        self.show_deviations_checkboxes()
        self.high_correction()
        self.recalculate_all()
        
        self.finalize_replacement_cost()

    def fill_facade_combobox(self):
        if self.facade_data is not None:
            facade_types = self.facade_data['facade_type'].dropna().unique()
            self.comboBox_facade.addItem("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–∞–¥")
            self.comboBox_facade.addItems(facade_types)


    def on_facade_selected(self, index):
        if self.building_id is None:
            return
        if index == 0:
            self.facade_corrected_price = 0  # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 0, –µ—Å–ª–∏ —Ñ–∞—Å–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω
            self.label_facade_result.setText("–§–∞—Å–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ ID 1‚Äì136 –∏ 140‚Äì155
        if not (1 <= self.building_id <= 136 or 140 <= self.building_id <= 144 or 153 <= self.building_id <= 155):
            self.facade_corrected_price = 0  # ‚úÖ –û–±–Ω—É–ª—è–µ–º, –µ—Å–ª–∏ —Ñ–∞—Å–∞–¥ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
            self.label_facade_result.setText("–ü–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ñ–∞—Å–∞–¥ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è")
            return

        selected_type = self.comboBox_facade.currentText()
        row = self.facade_data[self.facade_data['facade_type'] == selected_type]

        if row.empty:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è —Ñ–∞—Å–∞–¥–∞: {selected_type}")
            self.facade_corrected_price = 0  # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0, –µ—Å–ª–∏ —Ñ–∞—Å–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            return

        try:
            percent = row['%'].values[0]
            price_str = self.parent.label_price_result.text().replace("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤ –ø–æ –£–ö–£–ü:", "").strip().split()[0]
            price = float(price_str.replace(",", "").replace(" ", ""))
            self.facade_corrected_price = price * percent  # ‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏

            self.label_facade_result.setText(
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–∞—Å–∞–¥–∞: {self.facade_corrected_price:,.2f} —Å—É–º"
            )
            self.recalculate_all()

        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É: {e}")
            self.facade_corrected_price = 0  # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        





    def show_improvements_labels(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç QLabel'—ã —Å –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏ (–±–µ–∑ —á–µ–∫–±–æ–∫—Å–æ–≤)"""
        improvements_df = self.data_service.Improvements()

        # üìå –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –∑–∞–¥–∞—Ç—å!
        label_price_result = self.parent.label_price_result.text().replace("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤ –ø–æ –£–ö–£–ü:", "").strip().split()[0]
        self.ukup_price = float(label_price_result.replace(" ", "").replace(",", ""))

        if improvements_df is None or self.building_id not in improvements_df.index:
            self.improvement_correction = 0.0  # ‚¨ÖÔ∏è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return

        _, applied_improvements = self.apply_improvements_logic(self.building_id, price_per_m2=0.0)

        if self.groupBox_improvements.layout() is None:
            self.groupBox_improvements.setLayout(QVBoxLayout())
        layout = self.groupBox_improvements.layout()

        for i in reversed(range(layout.count())):
            widget = layout.itemAt(i).widget()
            layout.removeWidget(widget)
            widget.setParent(None)

        total_percent = 0.0

        for name, correction in applied_improvements:
            total_percent += correction
            percent_str = f"{correction * 100:+.2f}%"
            label = QLabel(f"{name}: {percent_str}")
            layout.addWidget(label)

        total_sum = self.ukup_price * total_percent
        total_label = QLabel(f"<b>–°—É–º–º–∞ –≤—Å–µ—Ö –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫: {total_sum:,.2f} —Å—É–º</b>")
        layout.addWidget(total_label)

        self.improvement_correction = total_sum






    def show_deviations_checkboxes(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —á–µ–∫–±–æ–∫—Å—ã —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ –∏ –∏—Ç–æ–≥–æ–≤—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É"""
        deviations_df = self.data_service.Deviations()

        if deviations_df is None or self.building_id not in deviations_df.index:
            return

        row = deviations_df.loc[self.building_id]

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ layout —É groupBox_deviations –µ—Å—Ç—å
        if self.label_injener_correct.layout() is None:
            self.label_injener_correct.setLayout(QVBoxLayout())

        layout = self.label_injener_correct.layout()

        # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for i in reversed(range(layout.count())):
            widget = layout.itemAt(i).widget()
            layout.removeWidget(widget)
            widget.setParent(None)

        self.deviation_checkboxes = {}
        self.deviation_correction = 0.0

        for column, value in row.items():
            if pd.notna(value) and str(value).strip() != '':
                checkbox = QCheckBox(f"{column}: {float(value):+.2f} —Å—É–º")
                checkbox.stateChanged.connect(self.update_selected_deviations)
                layout.addWidget(checkbox)
                self.deviation_checkboxes[column] = (checkbox, float(value))

        # –î–æ–±–∞–≤–∏–º QLabel –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
        self.label_deviation_total = QLabel("–°—É–º–º–∞—Ä–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: 0.00 —Å—É–º")
        layout.addWidget(self.label_deviation_total)


    def update_selected_deviations(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É–º–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–µ–∫–±–æ–∫—Å–∞–º"""
        if not hasattr(self, 'deviation_checkboxes'):
            return

        total = 0.0
        for _, (checkbox, value) in self.deviation_checkboxes.items():
            if checkbox.isChecked():
                total += value

        self.deviation_correction = total
        self.label_deviation_total.setText(f"–°—É–º–º–∞—Ä–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: {total:,.2f} —Å—É–º")
        self.recalculate_all()
        



    def apply_improvements_logic(self, building_id, price_per_m2):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫ —Ü–µ–Ω–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É–º–º—É –ø–æ–ø—Ä–∞–≤–æ–∫"""
        general_data = self.valuation_window.collect_general_data()

        improvements_df = self.parent.data_service.Improvements()

        if building_id not in improvements_df.index:
            self.improvement_correction = 0
            return price_per_m2, []

        analog_improvements = improvements_df.loc[[building_id]]

        improvements_mapping = {
            '–≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏—è': '–≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏—è',
            '—ç–ª–µ–∫—Ç—Ä–æ–æ—Å–≤–µ—â–µ–Ω–∏–µ': '—ç–ª–µ–∫—Ç—Ä–æ–æ—Å–≤–µ—â–µ–Ω–∏–µ',
            '–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ': '–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
            '–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è': '–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
            '—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è_–ª–∏–Ω–∏—è': '—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –ª–∏–Ω–∏—è',
            '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_–≤–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å': '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –≤–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å',
            '–≥–æ—Ä—è—á–µ–µ_–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ': '–≥–æ—Ä—è—á–µ–µ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
            '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ_–ø–µ—á–Ω–æ–µ': '–ø–µ—á–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ',
            '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ_—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ': '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ',
            '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ_–ê–ì–í': '–≤–æ–¥—è–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ (–ê–ì–í, –¥–≤—É—Ö–∫–æ–Ω—Ç—É—Ä–Ω—ã–π –∫–æ—Ç—ë–ª)'
        }

        applied_improvements = []
        total_percent = 0.0
        heating_selected = general_data.get('–æ—Ç–æ–ø–ª–µ–Ω–∏–µ', '').lower()

        central_correction_applied = False
        central_heating_present = False
        alternative_heating_selected = heating_selected in ['–≤–æ–¥—è–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ (–∞–≥–≤, –¥–≤—É—Ö–∫–æ–Ω—Ç—É—Ä–Ω—ã–π –∫–æ—Ç—ë–ª)', '–ø–µ—á–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ']

        for _, row in analog_improvements.iterrows():
            improvement_name = row['–£–ª—É—á—à–µ–Ω–∏–µ']
            has_improvement = row['–ò–º–µ–µ—Ç—Å—è']
            correction_factor = row['–ü–æ–ø—Ä–∞–≤–∫–∞']

            # üìå –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ" —Å—Ä–∞–∑—É
            if improvement_name.lower() == '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ':
                central_heating_present = has_improvement == 1
                continue  # ‚õî –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ!

            elif improvement_name.lower() in ['–ø–µ—á–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ', '–≤–æ–¥—è–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ (–∞–≥–≤, –¥–≤—É—Ö–∫–æ–Ω—Ç—É—Ä–Ω—ã–π –∫–æ—Ç—ë–ª)']:
                if heating_selected == improvement_name.lower() and has_improvement == 0:
                    applied_improvements.append((f'–ù–∞–ª–∏—á–∏–µ {improvement_name}', correction_factor))
                    total_percent += correction_factor
                elif heating_selected != improvement_name.lower() and has_improvement == 1:
                    applied_improvements.append((f'–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ {improvement_name}', -correction_factor))
                    total_percent -= correction_factor
                continue

            for general_key, mapped_name in improvements_mapping.items():
                if mapped_name.lower() == improvement_name.lower():
                    user_selected = general_data.get(general_key, False)

                    if has_improvement == 0 and user_selected:
                        applied_improvements.append((improvement_name, correction_factor))
                        total_percent += correction_factor

                    elif has_improvement == 1 and not user_selected:
                        applied_improvements.append((improvement_name, -correction_factor))
                        total_percent -= correction_factor
                    break

        # üìå –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if central_heating_present and alternative_heating_selected and not central_correction_applied:
            correction_factor = analog_improvements[
                analog_improvements['–£–ª—É—á—à–µ–Ω–∏–µ'].str.lower() == '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ'
            ]['–ü–æ–ø—Ä–∞–≤–∫–∞'].values[0]

            applied_improvements.append(('–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—è', -correction_factor))
            total_percent -= correction_factor

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–æ–≥–µ
            selected_heating_row = analog_improvements[
                analog_improvements['–£–ª—É—á—à–µ–Ω–∏–µ'].str.lower() == heating_selected
            ]

            if not selected_heating_row.empty:
                # –ï—Å–ª–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–Ω–∞–ª–æ–≥–µ, –±–µ—Ä–µ–º –µ–≥–æ –ø–æ–ø—Ä–∞–≤–∫—É
                selected_heating_correction = selected_heating_row['–ü–æ–ø—Ä–∞–≤–∫–∞'].values[0]
                applied_improvements.append((f'–ù–∞–ª–∏—á–∏–µ {heating_selected}', selected_heating_correction))
                total_percent += selected_heating_correction
            else:
                # –ï—Å–ª–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏—è –Ω–µ—Ç –≤ –∞–Ω–∞–ª–æ–≥–µ, –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ 0.065
                applied_improvements.append(('–ù–∞–ª–∏—á–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—è ', 0.065))
                total_percent += 0.065

            central_correction_applied = True  # ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞, –±–æ–ª—å—à–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è

        
        # ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –≤ –¥–µ–Ω—å–≥–∞—Ö
        try:
            price_str = self.parent.label_price_result.text().replace("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤ –ø–æ –£–ö–£–ü:", "").strip().split()[0]
            base_price = float(price_str.replace(" ", "").replace(",", ""))
            self.improvement_correction = base_price * total_percent
            
        except Exception as e:
            self.improvement_correction = 0
           

        return price_per_m2, applied_improvements
    

    def update_selected_improvements(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π (–±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"""
        if not hasattr(self, 'improvement_checkboxes'):
            return

        total_percent = 0.0
        for _, (checkbox, value) in self.improvement_checkboxes.items():
            if checkbox.isChecked():
                total_percent += value

        try:
            price_str = self.parent.label_price_result.text().replace("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤ –ø–æ –£–ö–£–ü:", "").strip().split()[0]
            price = float(price_str.replace(" ", "").replace(",", ""))
            self.improvement_correction = price * total_percent
        except Exception:
            self.improvement_correction = 0.0
        


    def high_correction(self, index=None):
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ ID –æ—Ç 1 –¥–æ 108
            if not (1 <= self.building_id <= 108):
                self.label_height_correction.setText("–ü–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ –≤—ã—Å–æ—Ç—É –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è")
                self.high_corrected_price = 0
                return

            height_str = self.parent.lineEdit_height.text().replace(',', '.')
            fact_high_value = float(height_str)

            if fact_high_value < 2.4:
                koeff = 1.06
            elif fact_high_value > 4.0:
                koeff = 0.9
            else:
                filter_high_df = self.altitude_data[
                    self.altitude_data['–ü–æ–ª–µ–∑–Ω–∞—è –≤—ã—Å–æ—Ç–∞, –º'] == fact_high_value
                ]
                if filter_high_df.empty:
                    self.label_height_correction.setText("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤—ã—Å–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    self.high_corrected_price = 0
                    return

                koeff = filter_high_df['–ü–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'].values[0]

            price_str = self.parent.label_price_result.text().replace("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤ –ø–æ –£–ö–£–ü:", "").strip().split()[0]
            price_per_m2 = float(price_str.replace(",", "").replace(" ", ""))

            high_correction_result = price_per_m2 * (koeff - 1)
            self.high_corrected_price = high_correction_result

            self.label_height_correction.setText(
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≤—ã—Å–æ—Ç—É: {high_correction_result:,.2f} —Å—É–º"
            )
            self.recalculate_all()
            
        except Exception as e:
            # QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ –≤—ã—Å–æ—Ç—É: {e}")
            self.high_corrected_price = 0



    def update_corrected_price(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
        ukup = getattr(self, 'ukup_price', 0.0)
        improvement = getattr(self, 'improvement_correction', 0.0)
        deviation = getattr(self, 'deviation_correction', 0.0)
        height = getattr(self, 'high_corrected_price', 0.0)
        facade = getattr(self, 'facade_corrected_price', 0.0)

        total = ukup + improvement + deviation + height + facade
        self.total_ukup = total
        

        if self.lineEdit_corrected_price is not None:
            self.lineEdit_corrected_price.setText(f"{total:,.2f}")
        
    def update_label_unit(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç label_unit –∏ –∑–Ω–∞—á–µ–Ω–∏–µ unit_value –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö UKUP"""
        df = self.data_service.ukup()
        if self.building_id not in df.index:
            self.label_unit.setText("–ï–¥. –∏–∑–º. –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
            self.unit_value = 1
            self.lineEdit_unit.setText("1")
            return

        row = df.loc[self.building_id]

        # –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        square = self.parent.lineEdit_square.text().strip().replace(",", ".")
        volume = self.parent.lineEdit_volume.text().strip().replace(",", ".")
        length = self.parent.lineEdit_length.text().strip().replace(",", ".")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–æ—â–∞–¥—å ‚Äî –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë
        if pd.notna(row.get('–ü–ª–æ—â–∞–¥—å –¥–æ –º2')) and square:
            try:
                self.unit_value = float(square)
            except ValueError:
                self.unit_value = 1.0
            self.label_unit.setText("–ü–ª–æ—â–∞–¥—å: –º¬≤")
            self.lineEdit_unit.setText(str(self.unit_value))

        elif pd.notna(row.get('–û–±—ä—ë–º –¥–æ –º3')) and volume:
            try:
                self.unit_value = float(volume)
            except ValueError:
                self.unit_value = 1.0
            self.label_unit.setText("–û–±—ä—ë–º: –º¬≥")
            self.lineEdit_unit.setText(str(self.unit_value))

        elif pd.notna(row.get('–ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å')) and length:
            try:
                self.unit_value = float(length)
            except ValueError:
                self.unit_value = 1.0
            self.label_unit.setText("–î–ª–∏–Ω–∞: –º")
            self.lineEdit_unit.setText(str(self.unit_value))

        else:
            self.unit_value = 1.0
            self.label_unit.setText("–ó–∞ —à—Ç—É–∫—É")
            self.lineEdit_unit.setText("1")

        
    def set_seismic_correction(self):
        try:
            df = self.data_service.territorial_correction()
            if df is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫.")

            selected_region = self.valuation_window.comboBox_oblast.currentText()
            match = df[df['region'] == selected_region]

            if match.empty:
                raise ValueError(f"–û–±–ª–∞—Å—Ç—å '{selected_region}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—Å–µ–≥–¥–∞
            self.territorial = float(match.iloc[0]['correction'])

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–π—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è 1, 2, 107, 108
            if self.building_id in [1, 2, 107, 108]:
                self.sesmos = float(match.iloc[0]['sesmos_correction'])
                self.lineEdit_sesmos.setText(f"{self.sesmos:.3f}")
                self.lineEdit_sesmos.show()
                if hasattr(self, "label_sesmos"):
                    self.label_sesmos.show()
            else:
                self.sesmos = 1.0
                self.lineEdit_sesmos.setText("1.000")
                self.lineEdit_sesmos.hide()
                if hasattr(self, "label_sesmos"):
                    self.label_sesmos.hide()

        except Exception as e:
            self.sesmos = 1.0
            self.territorial = 1.0
            self.lineEdit_sesmos.setText("1.000")
            self.lineEdit_sesmos.hide()
            if hasattr(self, "label_sesmos"):
                self.label_sesmos.hi_



    def set_reg_coeff(self):
        

        oblast = self.valuation_window.comboBox_oblast.currentText()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        df_reg = self.data_service.territorial_correction() 
        df_reg_coeff = self.data_service.load_regional_coff()


        # –ò—â–µ–º region_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ–±–ª–∞—Å—Ç–∏
        reg_row = df_reg[df_reg['region'] == oblast]
        if reg_row.empty:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–†–µ–≥–∏–æ–Ω '{oblast}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.")
            return

        reg_id = reg_row.iloc[0]['region_id']  # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ region_id

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ region_id
        filtered = df_reg_coeff[df_reg_coeff['region_id'] == reg_id]

        if filtered.empty:
            QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", f"–ù–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: {oblast}")
            return
        self.filtered_reg_coeff = filtered  # ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ!

        self.comboBox_type_koeff.clear()  # –æ—á–∏—â–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        types = filtered['type'].dropna().unique()


        for t in filtered['type'].dropna().unique():
            self.comboBox_type_koeff.addItem(str(t))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if types.size > 0:
            self.comboBox_type_koeff.setCurrentIndex(0)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–Ω–æ
            selected_type = self.comboBox_type_koeff.currentText()
            self.on_type_selected(selected_type)  # –≤—Ä—É—á–Ω—É—é –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        

    def on_type_selected(self, selected_type):
        if not hasattr(self, 'filtered_reg_coeff'):
            return

        row = self.filtered_reg_coeff[self.filtered_reg_coeff['type'] == selected_type]

        if row.empty:
            self.lineEdit_reg_koeff.setText("0")
            self.label_reg_koeff.setText("–¢–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        coeff = row.iloc[0]['coff']
        self.lineEdit_reg_koeff.setText(f"{coeff:.3f}")
        self.label_reg_koeff.setText(f"{selected_type}")
        self.reg_coeff = coeff
        self.recalculate_all()

    def set_stat_koeff(self):
        df_stat = self.data_service.load_stat_koeff()
        result = df_stat['–ö–æ—ç—Ñ—Ñ'].prod()
        date = df_stat['–î–∞—Ç–∞'].tail(1).values[0]
        self.lineEdit_stat_koeff.setText(f"{result:.3f}")
        self.label_stat_koeff.setText(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ì–æ—Å–∫–æ–º—Å—Ç–∞—Ç–∞ —Å  01.04.2004 –ø–æ {date}")
        self.stat_coeff = result
        self.recalculate_all()
   
    def wrap_text(self, text, max_length=40):
        if len(text) <= max_length:
            return text
        # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–±–µ–ª –∫ max_length
        nearest_space = text.rfind(' ', 0, max_length)
        if nearest_space == -1:
            nearest_space = max_length
        return text[:nearest_space] + '\n' + text[nearest_space+1:]

    
    def populate_wear_table(self, df):
        


        row_count = len(df) + 1
        col_count = len(df.columns)
        self.tableWidget_wear.horizontalHeader().setStretchLastSection(True)
        

        self.tableWidget_wear.setRowCount(row_count)
        self.tableWidget_wear.setColumnCount(col_count)
        # –ò—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        headers = list(df.columns)

        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        renamed_headers = []
        for h in headers:
            if h == "–ü–æ–ø—Ä–∞–≤–∫–∞ –∫ —É–¥–µ–ª—å–Ω—ã–º –≤–µ—Å–∞–º %":
                renamed_headers.append("–ü–æ–ø—Ä–∞–≤–∫–∞ –∫\n—É–¥–µ–ª—å–Ω—ã–º –≤–µ—Å–∞–º %")
            elif h == "–§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–∑–Ω–æ—Å %":
                renamed_headers.append("–§–∏–∑–∏—á–µ—Å–∫–∏–π\n–∏–∑–Ω–æ—Å %")
            else:
                renamed_headers.append(h)

        self.tableWidget_wear.setHorizontalHeaderLabels(renamed_headers)

        
        

        for row_idx, row in enumerate(df.itertuples(index=False)):
            max_lines = 1

            for col_idx, value in enumerate(row):
                display_value = str(value)
                if df.columns[col_idx] == "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
                    display_value = self.wrap_text(display_value)
                    max_lines = value.count("\n") + 1  # —É—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫

                item = QTableWidgetItem(display_value)
                if col_idx in [2, 3]:  # –ö–æ–ª–æ–Ω–∫–∏ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ 0.0
                    if not value or not str(value).replace('.', '', 1).isdigit():
                        value = 0.0
                    item = QTableWidgetItem(str(value))
                    item.setFlags(item.flags() | Qt.ItemIsEditable)
                else:
                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                self.tableWidget_wear.setItem(row_idx, col_idx, item)
            base_height = 25  # –º–æ–∂–Ω–æ –ø–æ–¥–æ–≥–Ω–∞—Ç—å –ø–æ–¥ —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.tableWidget_wear.setRowHeight(row_idx, base_height * max_lines)
        self.add_total_row(df)
        self.tableWidget_wear.itemChanged.connect(self.update_total_row)
        self.update_total_row()
        self.tableWidget_wear.resizeColumnsToContents()

    def add_total_row(self, df):
        row_idx = self.tableWidget_wear.rowCount() - 1
        for col in range(self.tableWidget_wear.columnCount()):
            item = QTableWidgetItem()
            if col == 0:
                item.setText("–í–°–ï–ì–û")
            item.setFlags(Qt.ItemIsEnabled)  # ‚ùó –¢–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            font = item.font()
            font.setBold(True)
            item.setFont(font)
            self.tableWidget_wear.setItem(row_idx, col, item)

        self.update_total_row()



    def update_total_row(self):
        self.recalculate_all()

        

    def load_structural_elements(self, building_id):
        df = self.data_service.structural_elements()
        if df is None or df.empty:
            QMessageBox.warning(self.parent, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º.")
            return

        if building_id not in df.index:
            QMessageBox.warning(self.parent, "–û—à–∏–±–∫–∞", f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID: {building_id}")
            return
        df_filtered = df[df.index == building_id][["–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–î–æ–ª—è %"]].copy()

        # –£–¥–∞–ª–∏–º –≤–æ–∑–º–æ–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É "–û–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ª–∏—à–Ω–∏–µ
        df_filtered = df_filtered.loc[:, ["–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–î–æ–ª—è %"]]

        # –î–æ–±–∞–≤–∏–º –∏ —É–ø–æ—Ä—è–¥–æ—á–∏–º –∫–æ–ª–æ–Ω–∫–∏
        df_filtered["–ü–æ–ø—Ä–∞–≤–∫–∞ –∫ —É–¥–µ–ª—å–Ω—ã–º –≤–µ—Å–∞–º %"] = 0.0
        df_filtered["–§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–∑–Ω–æ—Å %"] = 0.0
        df_filtered = df_filtered[["–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–î–æ–ª—è %", "–ü–æ–ø—Ä–∞–≤–∫–∞ –∫ —É–¥–µ–ª—å–Ω—ã–º –≤–µ—Å–∞–º %", "–§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–∑–Ω–æ—Å %"]]
        return df_filtered
        
    def handle_key_press(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ Enter –∏ —Å—Ç—Ä–µ–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —è—á–µ–π–∫–∞–º."""
        current_row = self.tableWidget_wear.currentRow()
        current_column = self.tableWidget_wear.currentColumn()

        if event.key() == Qt.Key_Return or event.key() == Qt.Key_Enter:
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤–Ω–∏–∑ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            next_row = current_row + 1
            if next_row < self.tableWidget_wear.rowCount():
                self.tableWidget_wear.setCurrentCell(next_row, current_column)
                self.tableWidget_wear.editItem(self.tableWidget_wear.item(next_row, current_column))
        elif event.key() == Qt.Key_Up:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ
            prev_row = max(0, current_row - 1)
            self.tableWidget_wear.setCurrentCell(prev_row, current_column)
            self.tableWidget_wear.editItem(self.tableWidget_wear.item(prev_row, current_column))
        elif event.key() == Qt.Key_Down:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ
            next_row = min(self.tableWidget_wear.rowCount() - 1, current_row + 1)
            self.tableWidget_wear.setCurrentCell(next_row, current_column)
            self.tableWidget_wear.editItem(self.tableWidget_wear.item(next_row, current_column))
        elif event.key() == Qt.Key_Left:
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤–ª–µ–≤–æ
            prev_col = max(0, current_column - 1)
            self.tableWidget_wear.setCurrentCell(current_row, prev_col)
            self.tableWidget_wear.editItem(self.tableWidget_wear.item(current_row, prev_col))
        elif event.key() == Qt.Key_Right:
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤–ø—Ä–∞–≤–æ
            next_col = min(self.tableWidget_wear.columnCount() - 1, current_column + 1)
            self.tableWidget_wear.setCurrentCell(current_row, next_col)
            self.tableWidget_wear.editItem(self.tableWidget_wear.item(current_row, next_col))
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            QWidget.keyPressEvent(self.tableWidget_wear, event)



    def set_wear_labelline(self):
        
        self.wear_price = (self.wear_percent / 100) * self.replacement_cost
        avg_wear_line = self.wear_price
        avg_wear_label = self.wear_percent
        self.label_wear.setText(f"–§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–∑–Ω–æ—Å {avg_wear_label:.2f} %")
        self.lineEdit_wear.setText(f"{avg_wear_line:,.2f}")

        


    def calculate_replacement_cost(self):
        required_attrs = ['total_ukup', 'unit_value', 'reg_coeff', 'stat_coeff', 'developer', 'inconsistency']
        missing = [attr for attr in required_attrs if not hasattr(self, attr)]
        if missing:
            self.replacement_cost = 0.0
            return

        try:
            self.replacement_cost = (
                self.total_ukup * self.sesmos * self.territorial *
                float(self.unit_value) *
                self.reg_coeff *
                self.stat_coeff *
                (1+ (self.developer / 100)) *
                self.inconsistency
            )
        except Exception as e:
            self.replacement_cost = 0.0



   
    def finalize_replacement_cost(self):
        
        self.calculate_replacement_cost()
        self.set_wear_labelline()
        self.final_cost = self.replacement_cost - self.wear_price
        # self.label_final_cost.setText(f"{self.final_cost:,.2f}")
        self.lineEdit_final_cost.setText(f"{self.final_cost:,.2f}")
    
    
    def calculate_inconsistency_and_wear(self):
        row_idx = self.tableWidget_wear.rowCount() - 1
        total_share = 0
        total_adjustment = 0
        weighted_wear_sum = 0

        for row in range(row_idx):
            try:
                share = self.tableWidget_wear.item(row, 1)
                adjustment = self.tableWidget_wear.item(row, 2)
                wear = self.tableWidget_wear.item(row, 3)

                share_value = float(share.text()) if share and share.text() else 0.0
                adjustment_value = float(adjustment.text()) if adjustment and adjustment.text() else 0.0
                wear_value = float(wear.text()) if wear and wear.text() else 0.0

                total_share += share_value
                total_adjustment += adjustment_value
                weighted_wear_sum += (wear_value * share_value) / 100
            except Exception:
                continue

        self.inconsistency = (total_share - total_adjustment) / 100
        self.wear_percent = weighted_wear_sum
        self.lineEdit_inconsistency.setText(str(self.inconsistency))

        # –ó–∞–ø–∏—à–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
        self.tableWidget_wear.blockSignals(True)
        self.tableWidget_wear.setItem(row_idx, 1, QTableWidgetItem(str(round(total_share, 2))))
        self.tableWidget_wear.setItem(row_idx, 2, QTableWidgetItem(str(round(total_adjustment, 2))))
        self.tableWidget_wear.setItem(row_idx, 3, QTableWidgetItem(str(round(weighted_wear_sum, 2))))
        self.tableWidget_wear.blockSignals(False)


    def recalculate_all(self):
        self.calculate_inconsistency_and_wear()
        self.update_corrected_price()
        self.calculate_replacement_cost()
        self.set_wear_labelline()

        self.final_cost = self.replacement_cost - self.wear_price
        self.lineEdit_final_cost.setText(f"{self.final_cost:,.2f}")

    

# –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–¢–ï–†–ê –í –¢–ê–ë–õ–ò–¶–£

    def on_accept(self):
        table = self.parent.tableWidget_liter_list

        def format_number(value):
            return f"{int(round(value)):,}".replace(",", " ")

        liter_data = self.collect_data()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Ç–µ—Ä, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        if self.parent.active_liter_number is not None:
            updated = False
            for idx, liter in enumerate(self.parent.main_window.saved_liters):
                if liter["number"] == self.parent.active_liter_number:
                    liter_data["number"] = self.parent.active_liter_number
                    self.parent.main_window.saved_liters[idx] = liter_data
                    updated = True
                    break

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
            for row in range(table.rowCount()):
                item = table.item(row, 0)
                if item and int(item.text()) == self.parent.active_liter_number:
                    table.setItem(row, 1, QTableWidgetItem(liter_data["building_type"]))
                    table.setItem(row, 2, QTableWidgetItem(format_number(self.replacement_cost)))
                    table.setItem(row, 3, QTableWidgetItem(format_number(self.wear_price)))
                    table.setItem(row, 4, QTableWidgetItem(format_number(self.final_cost)))
                    break

            if not updated:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏—Ç–µ—Ä ‚Äì –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É.")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π –ª–∏—Ç–µ—Ä
            max_number = 0
            for row in range(table.rowCount()):
                item = table.item(row, 0)  # –°—Ç–æ–ª–±–µ—Ü "‚Ññ"
                if item and item.text().isdigit():
                    max_number = max(max_number, int(item.text()))
            new_number = max_number + 1

            row_position = table.rowCount()
            table.insertRow(row_position)

            table.setItem(row_position, 0, QTableWidgetItem(str(new_number)))
            table.setItem(row_position, 1, QTableWidgetItem(liter_data["building_type"]))
            table.setItem(row_position, 2, QTableWidgetItem(format_number(self.replacement_cost)))
            table.setItem(row_position, 3, QTableWidgetItem(format_number(self.wear_price)))
            table.setItem(row_position, 4, QTableWidgetItem(format_number(self.final_cost)))

            if hasattr(self.parent, 'main_window') and self.parent.main_window:
                liter_data["number"] = new_number
                self.parent.main_window.saved_liters.append(liter_data)
        # üëá –û–±–Ω–æ–≤–∏–º —Å—Ç—Ä–æ–∫—É "–í–°–ï–ì–û"
        if hasattr(self.parent, "add_total_row") and hasattr(self.parent, "update_total_row"):
            # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É "–í–°–ï–ì–û", –µ—Å–ª–∏ –µ—Å—Ç—å
            table = self.parent.tableWidget_liter_list
            if table.rowCount() > 0 and table.item(table.rowCount() - 1, 0).text() == "–í–°–ï–ì–û":
                table.removeRow(table.rowCount() - 1)
            self.parent.add_total_row()
            self.parent.update_total_row()

        self.valuation_window.save_report()
                # ‚¨áÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ü–ª–æ—â–∞–¥—å, –í—ã—Å–æ—Ç–∞, –û–±—ä—ë–º –∏ —Å–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        self.parent.lineEdit_square.clear()
        self.parent.lineEdit_height.clear()
        self.parent.lineEdit_volume.clear()
        self.parent.pushButton_deviations_wear.setVisible(False)
        self.parent.pushButton_choose_analog.setVisible(False)

        self.accept()
        # self.parent.update_total_row()
    # –°–û–ë–ò–†–ê–ï–ú –î–ê–ù–ù–´–ï –ò–ó –î–ò–ê–õ–û–ì–ê

    def collect_data(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ liter"""
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Ç–∞–±–ª–∏—Ü–∞ wear)
        wear_data = []
        for row in range(self.tableWidget_wear.rowCount() - 1):  # exclude "–í–°–ï–ì–û"
            row_data = {}
            for col in range(self.tableWidget_wear.columnCount()):
                item = self.tableWidget_wear.item(row, col)
                header = self.tableWidget_wear.horizontalHeaderItem(col).text()
                row_data[header] = item.text() if item else ""
            wear_data.append(row_data)
        # –î–æ–±–∞–≤–∏–º applied_improvements ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
       

        data = {
            "building_type": self.parent.label_building_choose.text().strip(),
            "sesmos": float(self.lineEdit_sesmos.text().replace(",", ".").strip() or 0),
            "replacement_cost": self.replacement_cost,
            "wear_price": self.wear_price,
            "final_cost": self.final_cost,
            "corrected_price": getattr(self, "total_ukup", 0),
            "unit": self.lineEdit_unit.text().strip(),
            "unit_type": self.label_unit.text(),
            "reg_coeff": self.reg_coeff,
            "stat_coeff": self.stat_coeff,
            "developer_percent": self.developer,
            "inconsistency": getattr(self, "inconsistency", 0),
            "wear_percent": getattr(self, "wear_percent", 0),
            "facade_corrected_price": getattr(self, "facade_corrected_price", 0),
            "height_corrected_price": getattr(self, "high_corrected_price", 0),
            "improvement_correction": getattr(self, "improvement_correction", 0),
            "deviation_correction": getattr(self, "deviation_correction", 0),
            "structural_elements": wear_data,
            "reg_coeff_type": self.comboBox_type_koeff.currentText(),
            "facade_type": self.comboBox_facade.currentText(),
            "stat_koeff_label": self.label_stat_koeff.text()
        }
        _, applied_improvements = self.apply_improvements_logic(self.building_id, price_per_m2=0.0)
        price_str = self.parent.label_price_result.text().replace("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤ –ø–æ –£–ö–£–ü:", "").strip().split()[0]
        try:
            base_price = float(price_str.replace(" ", "").replace(",", ""))
        except:
            base_price = 0

        data["improvement_details"] = [
            {
                "name": name,
                "correction_percent": correction,
                "correction_value": round(base_price * correction, 2)
            }
            for name, correction in applied_improvements
        ]

                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        if hasattr(self, 'deviation_checkboxes'):
            data["deviation_details"] = []
            for name, (checkbox, value) in self.deviation_checkboxes.items():
                data["deviation_details"].append({
                    "name": name,
                    "value": value,
                    "selected": checkbox.isChecked()
                })
       
        base_data = self.parent.collect_liter_base_data()
        data.update(base_data)

        self.wear_dialog_data = data
        return data


    # –ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï –í –î–ò–ê–õ–û–ì
    def load_data(self, data: dict):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ª–∏—Ç–µ—Ä–∞"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ —Ü–µ–Ω
        self.replacement_cost = data.get("replacement_cost", 0)
        self.wear_price = data.get("wear_price", 0)
        self.final_cost = data.get("final_cost", 0)
        self.total_ukup = data.get("corrected_price", 0)
        self.sesmos = data.get("sesmos", 0)
        self.lineEdit_unit.setText(data.get("unit", ""))
        self.label_unit.setText(data.get("unit_type", ""))
        self.reg_coeff = data.get("reg_coeff", 1)
        self.stat_coeff = data.get("stat_coeff", 1)
        self.developer = data.get("developer_percent", 0)
        self.inconsistency = data.get("inconsistency", 0)
        self.wear_percent = data.get("wear_percent", 0)
        self.facade_corrected_price = data.get("facade_corrected_price", 0)
        self.high_corrected_price = data.get("height_corrected_price", 0)
        self.improvement_correction = data.get("improvement_correction", 0)
        self.deviation_correction = data.get("deviation_correction", 0)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–æ–≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ —Ñ–∞—Å–∞–¥–∞
        self.comboBox_type_koeff.setCurrentText(data.get("reg_coeff_type", ""))
        self.comboBox_facade.setCurrentText(data.get("facade_type", ""))
        self.label_stat_koeff.setText(data.get("stat_koeff_label", ""))

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        wear_data = data.get("structural_elements", [])
        self.tableWidget_wear.setRowCount(len(wear_data) + 1)  # +1 –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –í–°–ï–ì–û
        headers = [
            "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–î–æ–ª—è %", 
            "–ü–æ–ø—Ä–∞–≤–∫–∞ –∫ —É–¥–µ–ª—å–Ω—ã–º –≤–µ—Å–∞–º %", 
            "–§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–∑–Ω–æ—Å %"
        ]
        self.tableWidget_wear.setColumnCount(len(headers))
        self.tableWidget_wear.setHorizontalHeaderLabels([
            "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–î–æ–ª—è %",
            "–ü–æ–ø—Ä–∞–≤–∫–∞ –∫\n—É–¥–µ–ª—å–Ω—ã–º –≤–µ—Å–∞–º %",
            "–§–∏–∑–∏—á–µ—Å–∫–∏–π\n–∏–∑–Ω–æ—Å %"
        ])
        for row_idx, row_data in enumerate(wear_data):
            max_lines = 1
            for col_idx, header in enumerate(headers):
                value = row_data.get(header, "")
                if header == "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
                    value = self.wrap_text(str(value), max_length=40)
                    max_lines = value.count("\n") + 1  # —É—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫

                item = QTableWidgetItem(str(value))
                if col_idx in [2, 3]:  # –≠—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ
                    item.setFlags(item.flags() | Qt.ItemIsEditable)
                else:
                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                self.tableWidget_wear.setItem(row_idx, col_idx, item)
            base_height = 25  # –º–æ–∂–Ω–æ –ø–æ–¥–æ–≥–Ω–∞—Ç—å –ø–æ–¥ —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.tableWidget_wear.setRowHeight(row_idx, base_height * max_lines)
        self.tableWidget_wear.resizeColumnsToContents()

        for row_idx, row_data in enumerate(wear_data):
            for col_idx in range(self.tableWidget_wear.columnCount()):
                header = self.tableWidget_wear.horizontalHeaderItem(col_idx).text()
                item_text = row_data.get(header, "")
                item = QTableWidgetItem(item_text)
                self.tableWidget_wear.setItem(row_idx, col_idx, item)
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
        improvement_details = data.get("improvement_details", [])
        if improvement_details:
            # –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
            details_text = ""
            for item in improvement_details:
                name = item.get("name", "")
                percent = item.get("correction_percent", 0)
                value = item.get("correction_value", 0)
                details_text += f"{name}: {percent:+.3%} ({value:,.2f} —Å—É–º)\n"
            
            # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å QTextEdit –∏–ª–∏ QLabel
            if hasattr(self, "textEdit_improvements"):
                self.textEdit_improvements.setPlainText(details_text)
            elif hasattr(self, "label_improvements"):
                self.label_improvements.setText(details_text)
            

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        deviation_details = data.get("deviation_details", [])
        if deviation_details:
            if self.label_injener_correct.layout() is None:
                self.label_injener_correct.setLayout(QVBoxLayout())
            layout = self.label_injener_correct.layout()
            for i in reversed(range(layout.count())):
                widget = layout.itemAt(i).widget()
                layout.removeWidget(widget)
                widget.setParent(None)
            self.deviation_checkboxes = {}
            for item in deviation_details:
                checkbox = QCheckBox(f"{item['name']}: {item['value']:+.2f} —Å—É–º")
                checkbox.setChecked(item['selected'])
                checkbox.stateChanged.connect(self.update_selected_deviations)
                layout.addWidget(checkbox)
                self.deviation_checkboxes[item['name']] = (checkbox, item['value'])
            self.label_deviation_total = QLabel("–°—É–º–º–∞—Ä–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: 0.00 —Å—É–º")
            layout.addWidget(self.label_deviation_total)
            self.update_selected_deviations()
        self.tableWidget_wear.resizeColumnsToContents()

        self.recalculate_all()
